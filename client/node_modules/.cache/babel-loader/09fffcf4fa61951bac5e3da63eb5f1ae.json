{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nexport default (function (Base) {\n  return function (_Base) {\n    _inherits(_class, _Base);\n\n    function _class(props) {\n      _classCallCheck(this, _class);\n\n      var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));\n\n      var defaultState = {\n        page: props.defaultPage,\n        pageSize: props.defaultPageSize,\n        sorted: props.defaultSorted,\n        expanded: props.defaultExpanded,\n        filtered: props.defaultFiltered,\n        resized: props.defaultResized,\n        currentlyResizing: false,\n        skipNextSort: false\n      };\n\n      var resolvedState = _this.getResolvedState(props, defaultState);\n\n      var dataModel = _this.getDataModel(resolvedState, true);\n\n      _this.state = _this.calculateNewResolvedState(dataModel);\n      return _this;\n    }\n\n    _createClass(_class, [{\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        this.fireFetchData();\n      }\n    }, {\n      key: 'componentDidUpdate',\n      value: function componentDidUpdate(prevProps, prevState) {\n        var oldState = this.getResolvedState(prevProps, prevState);\n        var newState = this.getResolvedState(this.props, this.state); // Do a deep compare of new and old `defaultOption` and\n        // if they are different reset `option = defaultOption`\n\n        var defaultableOptions = ['sorted', 'filtered', 'resized', 'expanded'];\n        defaultableOptions.forEach(function (x) {\n          var defaultName = 'default' + (x.charAt(0).toUpperCase() + x.slice(1));\n\n          if (JSON.stringify(oldState[defaultName]) !== JSON.stringify(newState[defaultName])) {\n            newState[x] = newState[defaultName];\n          }\n        }); // If they change these table options, we need to reset defaults\n        // or else we could get into a state where the user has changed the UI\n        // and then disabled the ability to change it back.\n        // e.g. If `filterable` has changed, set `filtered = defaultFiltered`\n\n        var resettableOptions = ['sortable', 'filterable', 'resizable'];\n        resettableOptions.forEach(function (x) {\n          if (oldState[x] !== newState[x]) {\n            var baseName = x.replace('able', '');\n            var optionName = baseName + 'ed';\n            var defaultName = 'default' + (optionName.charAt(0).toUpperCase() + optionName.slice(1));\n            newState[optionName] = newState[defaultName];\n          }\n        }); // Props that trigger a data update\n\n        if (oldState.data !== newState.data || oldState.columns !== newState.columns || oldState.pivotBy !== newState.pivotBy || oldState.sorted !== newState.sorted || oldState.filtered !== newState.filtered) {\n          this.setStateWithData(this.getDataModel(newState, oldState.data !== newState.data));\n        }\n      }\n    }, {\n      key: 'calculateNewResolvedState',\n      value: function calculateNewResolvedState(dataModel) {\n        var oldState = this.getResolvedState();\n        var newResolvedState = this.getResolvedState({}, dataModel);\n        var freezeWhenExpanded = newResolvedState.freezeWhenExpanded; // Default to unfrozen state\n\n        newResolvedState.frozen = false; // If freezeWhenExpanded is set, check for frozen conditions\n\n        if (freezeWhenExpanded) {\n          // if any rows are expanded, freeze the existing data and sorting\n          var keys = Object.keys(newResolvedState.expanded);\n\n          for (var i = 0; i < keys.length; i += 1) {\n            if (newResolvedState.expanded[keys[i]]) {\n              newResolvedState.frozen = true;\n              break;\n            }\n          }\n        } // If the data isn't frozen and either the data or\n        // sorting model has changed, update the data\n\n\n        if (oldState.frozen && !newResolvedState.frozen || oldState.sorted !== newResolvedState.sorted || oldState.filtered !== newResolvedState.filtered || oldState.showFilters !== newResolvedState.showFilters || !newResolvedState.frozen && oldState.resolvedData !== newResolvedState.resolvedData) {\n          // Handle collapseOnsortedChange & collapseOnDataChange\n          if (oldState.sorted !== newResolvedState.sorted && this.props.collapseOnSortingChange || oldState.filtered !== newResolvedState.filtered || oldState.showFilters !== newResolvedState.showFilters || oldState.sortedData && !newResolvedState.frozen && oldState.resolvedData !== newResolvedState.resolvedData && this.props.collapseOnDataChange) {\n            newResolvedState.expanded = {};\n          }\n\n          Object.assign(newResolvedState, this.getSortedData(newResolvedState));\n        } // Set page to 0 if filters change\n\n\n        if (oldState.filtered !== newResolvedState.filtered) {\n          newResolvedState.page = 0;\n        } // Calculate pageSize all the time\n\n\n        if (newResolvedState.sortedData) {\n          newResolvedState.pages = newResolvedState.manual ? newResolvedState.pages : Math.ceil(newResolvedState.sortedData.length / newResolvedState.pageSize);\n          newResolvedState.page = newResolvedState.manual ? newResolvedState.page : Math.max(newResolvedState.page >= newResolvedState.pages ? newResolvedState.pages - 1 : newResolvedState.page, 0);\n        }\n\n        return newResolvedState;\n      }\n    }, {\n      key: 'setStateWithData',\n      value: function setStateWithData(dataModel, cb) {\n        var _this2 = this;\n\n        var oldState = this.getResolvedState();\n        var newResolvedState = this.calculateNewResolvedState(dataModel);\n        return this.setState(newResolvedState, function () {\n          if (cb) {\n            cb();\n          }\n\n          if (oldState.page !== newResolvedState.page || oldState.pageSize !== newResolvedState.pageSize || oldState.sorted !== newResolvedState.sorted || oldState.filtered !== newResolvedState.filtered) {\n            _this2.fireFetchData();\n          }\n        });\n      }\n    }]);\n\n    return _class;\n  }(Base);\n});","map":{"version":3,"mappings":"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","names":["_inherits","props","_classCallCheck","defaultState","page","defaultPage","pageSize","defaultPageSize","sorted","defaultSorted","expanded","defaultExpanded","filtered","defaultFiltered","resized","defaultResized","currentlyResizing","skipNextSort","resolvedState","_this","getResolvedState","dataModel","getDataModel","state","calculateNewResolvedState","_createClass","key","value","fireFetchData","prevProps","prevState","oldState","newState","defaultableOptions","forEach","defaultName","x","charAt","toUpperCase","slice","JSON","stringify","resettableOptions","baseName","replace","optionName","data","columns","pivotBy","setStateWithData","newResolvedState","freezeWhenExpanded","frozen","keys","Object","i","length","showFilters","resolvedData","collapseOnSortingChange","sortedData","collapseOnDataChange","assign","getSortedData","pages","manual","Math","ceil","max","cb","setState","_this2","Base"],"sources":["/Users/admin/Documents/tasks/mern-app/client/node_modules/react-table/src/lifecycle.js"],"sourcesContent":["export default Base =>\n  class extends Base {\n    constructor (props) {\n      super(props)\n\n      const defaultState = {\n        page: props.defaultPage,\n        pageSize: props.defaultPageSize,\n        sorted: props.defaultSorted,\n        expanded: props.defaultExpanded,\n        filtered: props.defaultFiltered,\n        resized: props.defaultResized,\n        currentlyResizing: false,\n        skipNextSort: false,\n      }\n      const resolvedState = this.getResolvedState(props, defaultState)\n      const dataModel = this.getDataModel(resolvedState, true)\n\n      this.state = this.calculateNewResolvedState(dataModel)\n    }\n\n    componentDidMount () {\n      this.fireFetchData()\n    }\n\n    componentDidUpdate (prevProps, prevState) {\n      const oldState = this.getResolvedState(prevProps, prevState)\n      const newState = this.getResolvedState(this.props, this.state)\n\n      // Do a deep compare of new and old `defaultOption` and\n      // if they are different reset `option = defaultOption`\n      const defaultableOptions = ['sorted', 'filtered', 'resized', 'expanded']\n      defaultableOptions.forEach(x => {\n        const defaultName = `default${x.charAt(0).toUpperCase() + x.slice(1)}`\n        if (JSON.stringify(oldState[defaultName]) !== JSON.stringify(newState[defaultName])) {\n          newState[x] = newState[defaultName]\n        }\n      })\n\n      // If they change these table options, we need to reset defaults\n      // or else we could get into a state where the user has changed the UI\n      // and then disabled the ability to change it back.\n      // e.g. If `filterable` has changed, set `filtered = defaultFiltered`\n      const resettableOptions = ['sortable', 'filterable', 'resizable']\n      resettableOptions.forEach(x => {\n        if (oldState[x] !== newState[x]) {\n          const baseName = x.replace('able', '')\n          const optionName = `${baseName}ed`\n          const defaultName = `default${optionName.charAt(0).toUpperCase() + optionName.slice(1)}`\n          newState[optionName] = newState[defaultName]\n        }\n      })\n\n      // Props that trigger a data update\n      if (\n        oldState.data !== newState.data ||\n        oldState.columns !== newState.columns ||\n        oldState.pivotBy !== newState.pivotBy ||\n        oldState.sorted !== newState.sorted ||\n        oldState.filtered !== newState.filtered\n      ) {\n        this.setStateWithData(this.getDataModel(newState, oldState.data !== newState.data))\n      }\n    }\n\n    calculateNewResolvedState (dataModel) {\n      const oldState = this.getResolvedState()\n      const newResolvedState = this.getResolvedState({}, dataModel)\n      const { freezeWhenExpanded } = newResolvedState\n\n      // Default to unfrozen state\n      newResolvedState.frozen = false\n\n      // If freezeWhenExpanded is set, check for frozen conditions\n      if (freezeWhenExpanded) {\n        // if any rows are expanded, freeze the existing data and sorting\n        const keys = Object.keys(newResolvedState.expanded)\n        for (let i = 0; i < keys.length; i += 1) {\n          if (newResolvedState.expanded[keys[i]]) {\n            newResolvedState.frozen = true\n            break\n          }\n        }\n      }\n\n      // If the data isn't frozen and either the data or\n      // sorting model has changed, update the data\n      if (\n        (oldState.frozen && !newResolvedState.frozen) ||\n        oldState.sorted !== newResolvedState.sorted ||\n        oldState.filtered !== newResolvedState.filtered ||\n        oldState.showFilters !== newResolvedState.showFilters ||\n        (!newResolvedState.frozen && oldState.resolvedData !== newResolvedState.resolvedData)\n      ) {\n        // Handle collapseOnsortedChange & collapseOnDataChange\n        if (\n          (oldState.sorted !== newResolvedState.sorted && this.props.collapseOnSortingChange) ||\n          oldState.filtered !== newResolvedState.filtered ||\n          oldState.showFilters !== newResolvedState.showFilters ||\n          (oldState.sortedData &&\n            !newResolvedState.frozen &&\n            oldState.resolvedData !== newResolvedState.resolvedData &&\n            this.props.collapseOnDataChange)\n        ) {\n          newResolvedState.expanded = {}\n        }\n\n        Object.assign(newResolvedState, this.getSortedData(newResolvedState))\n      }\n\n      // Set page to 0 if filters change\n      if (oldState.filtered !== newResolvedState.filtered) {\n        newResolvedState.page = 0\n      }\n\n      // Calculate pageSize all the time\n      if (newResolvedState.sortedData) {\n        newResolvedState.pages = newResolvedState.manual\n          ? newResolvedState.pages\n          : Math.ceil(newResolvedState.sortedData.length / newResolvedState.pageSize)\n        newResolvedState.page = newResolvedState.manual ? newResolvedState.page : Math.max(\n          newResolvedState.page >= newResolvedState.pages\n            ? newResolvedState.pages - 1\n            : newResolvedState.page,\n          0\n        )\n      }\n\n      return newResolvedState\n    }\n\n    setStateWithData (dataModel, cb) {\n      const oldState = this.getResolvedState()\n      const newResolvedState = this.calculateNewResolvedState(dataModel)\n\n      return this.setState(newResolvedState, () => {\n        if (cb) {\n          cb()\n        }\n        if (\n          oldState.page !== newResolvedState.page ||\n          oldState.pageSize !== newResolvedState.pageSize ||\n          oldState.sorted !== newResolvedState.sorted ||\n          oldState.filtered !== newResolvedState.filtered\n        ) {\n          this.fireFetchData()\n        }\n      })\n    }\n  }\n"]},"metadata":{},"sourceType":"module"}